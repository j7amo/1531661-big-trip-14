import TripBoardView from '../view/trip-board.js';
import SortView from '../view/sort.js';
import TripPointsListView from '../view/trip-points-list.js';
import NoTripPointsView from '../view/no-trip-points.js';
import TripPointView from '../view/trip-point.js';
import TripPointEditFormView from '../view/trip-point-edit.js';
import {render, RenderPosition} from '../utils/render.js';

// Общая концепция паттерна MVP, если я правильно понимаю, заключается в следующем:
// ============================
// МОДЕЛЬ - это данные (пока моки, потом придут с сервера). Эти данные мы передаём ПРЕЗЕНТЕРУ (напрямую с ПРЕДСТАВЛЕНИЕМ
// МОДЕЛЬ работать не может в этом паттерне), который является ДВУСТОРОННИМ посредником между МОДЕЛЬЮ и ПРЕДСТАВЛЕНИЕМ.
// ПРЕДСТАВЛЕНИЕ - это отображение наших данных на странице. Зачастую ПРЕДСТАВЛЕНИЕ интерактивно - пользователь
// может с ним взаимодействовать (создавать, получать, обновлять(редактировать) и удалять - классический CRUD).
// Если в ПРЕДСТАВЛЕНИИ что-то меняется в результате действий пользователя, то нам нужно обновить МОДЕЛЬ (данные).
// И тут снова работает ПРЕЗЕНТЕР, который теперь "идёт" в обратную сторону (от ПРЕДСТАВЛЕНИЯ к МОДЕЛИ), обновляя данные.
// То есть получается двусторонняя связь между МОДЕЛЬЮ и ПРЕДСТАВЛЕНИЕМ через ПРЕЗЕНТЕР, который контролирует,
// ЧТО и КАК менять в этих компонентах
// ============================
// Теперь объявим ПРЕЗЕНТЕР доски. Он будет брать данные из модели, создавать соответствующие представления, рендерить их
// на странице, вешать обработчики в нужных местах представлений. То есть по сути речь идёт о реализации бизнес-логики.
export default class TripBoard {
  // конструктор будет получать контейнер, в который будем рендерить саму доску и точки маршрута
  constructor(tripBoardContainer) {
    this._tripBoardContainer = tripBoardContainer;
    // при создании экземпляра доски будем сразу создавать view-компоненты для отрисовки:
    // - самой доски;
    // - сортировки;
    // - списка, в который будем помещать точки маршрута;
    // - заглушки, которая будет отображаться на случай отсутствия точек маршрута в принципе.
    this._tripBoardComponent = new TripBoardView();
    this._sortComponent = new SortView();
    this._tripPointsListComponent = new TripPointsListView();
    this._noTripPointsComponent = new NoTripPointsView();
  }

  // далее объявим методы презентера
  init(tripPoints) {
    this._tripPoints = tripPoints.slice();
    // Метод для инициализации (начала работы) модуля,
  }

  _renderSort() {
    // Метод для рендеринга сортировки
  }

  _renderTripPoint() {
    // Метод, куда уйдёт логика созданию и рендерингу компонентов точки маршрута,
  }

  _renderTripPoints() {
    // Метод для рендеринга N-точек маршрута за раз
  }

  _renderNoTripPoints() {
    // Метод для рендеринга заглушки
  }

  _renderTripBoard() {
    // Метод для инициализации (начала работы) модуля,
  }
}
