// заведём отдельную модель для сортировки
// здесь будем хранить, менять значение текущей сортировки и оповещать наблюдателей (какой-нибудь презентер)
import Observer from '../utils/observer.js';
import { SortType } from '../const.js';

export default class SortModel extends Observer {
  constructor() {
    super();
    // при создании модели сразу запишем дефолтный тип сортировки в свойство экземпляра модели сортировки
    this._activeSort = SortType.DEFAULT;
  }

  // сеттер будет не только устанавливать текущее значение сортировки, но и дёргать _notify для оповещения
  // заинтересованных в этом презентеров, чтобы они могли сразу отреагировать, если нужно
  // Внимание! Этот сеттер будет более умный, чем аналогичные сеттеры в других моделях:
  // 1) Он может обрабатывать ситуацию, когда в качестве аргументов приходят (updateType, sort). Такая ситуация возникает,
  // когда смена типа сортировки происходит в результате кликов пользователя по контролам именно сортировки.
  // 2) Он может обрабатывать ситуацию, когда в качестве аргументов приходят (updateType, sort, sortReset).
  // Такая ситуация возникает, когда происходит СБРОС сортировки к дефолтному значению в результате кликов пользователя
  // по контролам фильтров (так должно происходить согласно ТЗ).
  setSort(updateType, sort, sortReset) {
    if (sortReset) {
      this._activeSort = SortType.DEFAULT;
      this._notify(updateType, this._activeSort);
    } else {
      this._activeSort = sort;
      this._notify(updateType, sort);
    }
  }

  getSort() {
    return this._activeSort;
  }
}
